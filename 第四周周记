# 数据结构学习周记 - 树结构

## 二叉搜索树 (Binary Search Tree, BST)

### **查找操作**
- **步骤**：从根节点开始，与目标值比较：
  - 若等于当前节点值，返回节点。
  - 若小于当前节点值，递归左子树。
  - 若大于当前节点值，递归右子树。
- **时间复杂度**：平均 `O(log n)`，最坏 `O(n)`（树退化为链表）。

### **插入操作**
- **步骤**：
  1. 类似查找操作，找到合适的位置（空子树）。
  2. 将新节点插入到该位置。
- **时间复杂度**：同查找操作。

### **删除操作**
- **三种情况**：
  1. **无子节点**：直接删除。
  2. **有一个子节点**：用子节点替换被删节点。
  3. **有两个子节点**：  
     - 找到右子树的最小节点（或左子树的最大节点）替换被删节点。
     - 递归删除替换节点。
- **时间复杂度**：平均 `O(log n)`，最坏 `O(n)`。

---

## 平衡二叉树 (AVL 树)

### **查找操作**
- 与 BST 相同，但树始终平衡，时间复杂度稳定为 `O(log n)`。

### **插入操作**
1. 插入节点（同 BST）。
2. **更新平衡因子**：从插入点向上检查每个祖先节点的平衡因子（左子树高度 - 右子树高度）。
3. **调整平衡**：若平衡因子绝对值超过 1，进行旋转：
   - **LL 型**：右旋。
   - **RR 型**：左旋。
   - **LR 型**：先左旋再右旋。
   - **RL 型**：先右旋再左旋。

### **删除操作**
1. 删除节点（同 BST）。
2. **向上回溯**检查平衡因子，调整方式与插入相同。
- **时间复杂度**：`O(log n)`。

---

## 红黑树 (Red-Black Tree)

### **核心性质**
1. 节点是红色或黑色。
2. 根节点和叶子节点（NIL）是黑色。
3. 红色节点的子节点必须为黑色。
4. 任意路径的黑节点数量相同。

### **查找操作**
- 同 BST，时间复杂度 `O(log n)`（黑高保证树平衡）。

### **插入操作**
1. 插入新节点为红色（保持性质 4）。
2. **调整颜色和旋转**（分情况）：
   - **Case 1**：父节点是黑色，直接插入。
   - **Case 2**：父节点是红色，叔节点是红色 → 父、叔变黑，祖父变红，递归处理祖父节点。
   - **Case 3**：父节点红，叔节点黑 → 根据插入位置进行旋转：
     - **LL/RR 型**：右旋/左旋，并变色。
     - **LR/RL 型**：先左旋/右旋转换为 LL/RR 型。

### **删除操作**
1. 删除节点（类似 BST，但需记录替代节点的颜色）。
2. **修复红黑树性质**：
   - 若删除节点是黑色，需从替代节点开始调整：
     - **Case 1**：兄弟节点是红色 → 旋转父节点，改变颜色。
     - **Case 2**：兄弟节点黑，且其子节点均为黑 → 兄弟变红，递归处理父节点。
     - **Case 3/4**：兄弟节点黑，且存在红色子节点 → 旋转并变色。
- **时间复杂度**：`O(log n)`。

---

## 总结对比

| 特性             | 二叉搜索树 (BST)        | AVL 树                  | 红黑树                  |
|------------------|------------------------|-------------------------|-------------------------|
| **平衡性**       | 无                     | 严格平衡（高度差 ≤1）   | 近似平衡（黑高一致）    |
| **插入/删除效率**| 最坏 `O(n)`            | `O(log n)`              | `O(log n)`              |
| **查找效率**     | 平均 `O(log n)`        | `O(log n)`              | `O(log n)`              |
| **适用场景**     | 数据随机分布           | 查询密集型操作          | 插入/删除频繁的场景     |

**应用场景**：  
- AVL 树：数据库索引等需要快速查找的场景。  
- 红黑树：Java `TreeMap`、C++ `std::map` 等需要高效动态操作的场景。
